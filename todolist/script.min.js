!function(t){function e(n){if(s[n])return s[n].exports;var i=s[n]={exports:{},id:n,loaded:!1};return t[n].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var s={};return e.m=t,e.c=s,e.p="",e(0)}([function(t,e,s){t.exports=s(1)},function(t,e,s){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}var i=s(2),a=n(i);new a.default(document.querySelector(".todolist"))},function(t,e,s){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var s=0;s<e.length;s++){var n=e[s];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,s,n){return s&&t(e.prototype,s),n&&t(e,n),e}}(),a=s(3),o=function(){function t(e){n(this,t),this.todoList=e,this.taskId=1,this.onEnterKeyUp=this.onEnterKeyUp.bind(this),this.onNewTaskNameInput=this.onNewTaskNameInput.bind(this),this.onNewTaskBtnClick=this.onNewTaskBtnClick.bind(this),this.onCheckTaskClick=this.onCheckTaskClick.bind(this),this.onRemoveTaskClick=this.onRemoveTaskClick.bind(this),this.onCheckAllTaskClick=this.onCheckAllTaskClick.bind(this),this.onRemoveAllTaskClick=this.onRemoveAllTaskClick.bind(this),this.init()}return i(t,[{key:"init",value:function(){(0,a.createDOMElement)("h1",this.todoList,{className:"todolist__title",textContent:"TodoList"});var t=(0,a.createDOMElement)("div",this.todoList,{className:"todolist__add-task"});this.newTaskName=(0,a.createDOMElement)("input",t,{type:"text",className:"input input--text input--new-task",placeholder:"Enter task"}),this.newTaskName.addEventListener("input",this.onNewTaskNameInput),this.newTaskBtn=(0,a.createDOMElement)("button",t,{type:"button",className:"btn btn--primary btn--add",textContent:"Add",disabled:!0}),this.newTaskBtn.addEventListener("click",this.onNewTaskBtnClick),this.todoList.addEventListener("keyup",this.onEnterKeyUp)}},{key:"renderTasksContainer",value:function(){this.tasks=(0,a.createDOMElement)("ul",this.todoList,{className:"todolist__tasks tasks"}),this.tasks.addEventListener("click",this.onCheckTaskClick),this.tasks.addEventListener("click",this.onRemoveTaskClick)}},{key:"renderControls",value:function(){this.controls=(0,a.createDOMElement)("div",this.todoList,{className:"todolist__controls"});var t=(0,a.createDOMElement)("p",this.controls,{className:"todolist__tips"});this.currentCheckedTasks=(0,a.createDOMElement)("span",t,{className:"current-checked-tasks",textContent:"0"}),(0,a.createDOMElement)("span",t,{textContent:" items checked"}),this.checkAllTasksBtn=(0,a.createDOMElement)("button",this.controls,{type:"button",className:"btn btn--additional btn--check",textContent:"Check all"}),this.checkAllTasksBtn.addEventListener("click",this.onCheckAllTaskClick),this.clearTaskListBtn=(0,a.createDOMElement)("button",this.controls,{type:"button",className:"btn btn--additional btn--clear",textContent:"Remove all",disabled:!0}),this.clearTaskListBtn.addEventListener("click",this.onRemoveAllTaskClick)}},{key:"renderTask",value:function(t){this.tasks||this.renderTasksContainer();var e=(0,a.createDOMElement)("li",this.tasks,{className:"tasks__item"});(0,a.createDOMElement)("input",e,{type:"checkbox",className:"input input--checkbox",name:"taskList",id:"checkbox-"+this.taskId,value:"checkbox-"+this.taskId}),(0,a.createDOMElement)("label",e,{htmlFor:"checkbox-"+this.taskId,className:"label label--checkbox",textContent:t}),(0,a.createDOMElement)("div",e,{className:"icon icon--remove"}),this.taskId++}},{key:"addTaskToList",value:function(){this.renderTask(this.newTaskName.value),this.newTaskName.value="",this.newTaskBtn.disabled=!0,this.controls?this.updateControlsState():this.renderControls()}},{key:"removeTaskFromList",value:function(t){this.tasks.removeChild(t),this.tasks.firstChild||(this.todoList.removeChild(this.tasks),this.todoList.removeChild(this.controls),this.tasks=null,this.controls=null,this.checkAllTasksBtn=null,this.clearTaskListBtn=null,this.currentCheckedTasks=null)}},{key:"updateControlsState",value:function(){if(this.tasks){var t=this.checkedTasksCount;this.currentCheckedTasks.textContent=t,this.clearTaskListBtn.disabled=!(t>0),this.checkAllTasksBtn.textContent=t!==this.tasks.children.length?"Check all":"Uncheck all"}}},{key:"onNewTaskNameInput",value:function(t){this.newTaskBtn.disabled=!t.currentTarget.value}},{key:"onNewTaskBtnClick",value:function(){this.addTaskToList()}},{key:"onEnterKeyUp",value:function(t){13===t.keyCode&&this.newTaskName.value&&this.addTaskToList()}},{key:"onCheckTaskClick",value:function(t){t.target.classList.contains("input--checkbox")&&this.updateControlsState()}},{key:"onCheckAllTaskClick",value:function(){var t=(0,a.convertPreudoArrayToArray)(this.tasks.children),e=this.checkedTasksCount;t.forEach(function(s){return s.querySelector(".input--checkbox").checked=!(e===t.length)}),this.updateControlsState()}},{key:"onRemoveTaskClick",value:function(t){t.target.classList.contains("icon--remove")&&(this.removeTaskFromList(t.target.parentElement),this.updateControlsState())}},{key:"onRemoveAllTaskClick",value:function(){for(var t=this.tasks.children,e=t.length-1;e>=0;e--)t[e].querySelector(".input--checkbox:checked")&&this.removeTaskFromList(t[e]);this.updateControlsState()}},{key:"checkedTasksCount",get:function(){return(0,a.convertPreudoArrayToArray)(this.tasks.children).filter(function(t){return t.querySelector(".input--checkbox:checked")}).length}}]),t}();e.default=o},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.createDOMElement=function(t,e,s){var n=document.createElement(t);for(var i in s)s.hasOwnProperty(i)&&(n[i]=s[i]);return e.appendChild(n),n},e.convertPreudoArrayToArray=function(t){return Array.from(t)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,