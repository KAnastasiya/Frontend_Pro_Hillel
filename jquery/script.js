!function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={exports:{},id:r,loaded:!1};return e[r].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";var r=n(2);n(7);var i=function(e){return(0,r.$)(e.target).toggleClass(function(e){return"even_"+e})},o=function(e){},s=function(e){(0,r.$)(e.target).toggleClass("is-clicked"),(0,r.$)("#even").on("click",o),(0,r.$)(".btn--remove").attr("disabled",null).attr({type:"button",textContent:e.data.name}).on("click",a)},a=function(e){(0,r.$)(e.target).attr("disabled",!0),(0,r.$)("li").removeClass("is-clicked"),(0,r.$)("#even").off("click",i)};(0,r.$)("ul").on("click","li",{name:"Remove listeners"},s).find(".list__item").each(function(e,t){return t.textContent=t.textContent+"_"+e}).attr("id",function(e){return e%2?"odd":"even"}).find((0,r.$)("#even")).on("click",i)},function(e,t){e.exports=function(){var e=[];return e.toString=function(){for(var e=[],t=0;t<this.length;t++){var n=this[t];n[2]?e.push("@media "+n[2]+"{"+n[1]+"}"):e.push(n[1])}return e.join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<t.length;i++){var s=t[i];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}},function(e,t,n){"use strict";function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.$=void 0;var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(3),a=t.$=function(e){return new u(e)};a.listeners=[];var u=function(){function e(t){return i(this,e),(0,s.isString)(t)?this._ctx=Array.from(document.querySelectorAll(t)):this._ctx=[t],this}return o(e,[{key:"find",value:function(e){var t=this;return(0,s.isString)(e)?this._ctx=this._ctx.reduce(function(t,n){return[].concat(r(t),r(Array.from(n.querySelectorAll(e))))},[]):this._ctx=e._ctx.filter(function(e){return t._ctx.some(function(t){return t.contains(e)})}),this}},{key:"each",value:function(e){return this._ctx.forEach(function(t,n){return e(n,t)}),this}},{key:"attr",value:function(e,t){return this._ctx.reduce(function(n,r,i){if(void 0===t){if(!(0,s.isObject)(e))return n||r.getAttribute(e);for(var o in e)r[o]=e[o]}else null===t?r.removeAttribute(e):r[e]=(0,s.result)(t,i)},null)||this}},{key:"hasClass",value:function(e){return this._ctx[0].classList.contains(e)}},{key:"toggleClass",value:function(e,t){var n=function(e,n){return e.classList.toggle(n,t)};return this._ctx.forEach(function(t,r,i){return n(t,(0,s.result)(e,r,r,i))}),this}},{key:"addClass",value:function(e){return this.toggleClass(e,!0)}},{key:"removeClass",value:function(e){return this.toggleClass(e,!1)}},{key:"on",value:function(e,t,n,r){var i=this;return void 0===r&&(r=t,t=null),t?this._ctx.forEach(function(o){o.addEventListener(e,function(e){Array.from(o.querySelectorAll(t)).includes(e.target)&&(n&&(e.data=n),r(e))}),i._saveEventListener(o,e,r)}):this._ctx.forEach(function(t){t.addEventListener(e,r),i._saveEventListener(t,e,r)}),this}},{key:"off",value:function(e,t){var n=void 0;return n=e?t?function(n,r){return n.elemId===r.dataset.id&&n.events===e&&n.handler===t}:function(t,n){return t.elemId===n.dataset.id&&t.events===e}:function(e,t){return e.elemId===t.dataset.id},this._ctx.forEach(function(e){for(var t=a.listeners.length-1;t>=0;t--)n(a.listeners[t],e)&&(e.removeEventListener(a.listeners[t].events,a.listeners[t].handler),a.listeners.splice(t,1))}),this}},{key:"_saveEventListener",value:function(e,t,n){var r=e.dataset.id;r||(r=(0,s.generateId)("xxxxxx"),e.dataset.id=r),a.listeners.some(function(e){return e.elemId===r&&e.events===t&&e.handler===n})||a.listeners.push({elemId:r,events:t,handler:n})}}]),e}()},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=(t.isString=function(e){return"string"==typeof e},t.isFunc=function(e){return"function"==typeof e});t.isObject=function(e){return"object"===("undefined"==typeof e?"undefined":n(e))},t.result=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return r(e)?e.apply(null,n):e},t.generateId=function(e){return e.replace(/[xy]/g,function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})}},function(e,t,n){t=e.exports=n(1)(),t.push([e.id,"/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,footer,header,nav,section{display:block}h1{font-size:2em;margin:.67em 0}figcaption,figure,main{display:block}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}dfn{font-style:italic}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}audio,video{display:inline-block}audio:not([controls]){display:none;height:0}img{border-style:none}svg:not(:root){overflow:hidden}button,input,optgroup,select,textarea{font-family:sans-serif;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{display:inline-block;vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details,menu{display:block}summary{display:list-item}canvas{display:inline-block}[hidden],template{display:none}",""])},function(e,t,n){t=e.exports=n(1)(),t.i(n(4),""),t.push([e.id,"body{padding:20px}ul{padding-left:20px;margin-bottom:20px}li{font-size:16px;padding:5px 0;cursor:pointer}li.is-clicked{color:green;font-size:18px}li.is-clicked#even{color:blue}li[class*=even]{text-transform:uppercase}.btn{padding:6px 10px}.btn:not([disabled]){cursor:pointer}.btn[disabled]{opacity:.5}",""])},function(e,t,n){function r(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=p[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(l(r.parts[o],t))}else{for(var s=[],o=0;o<r.parts.length;o++)s.push(l(r.parts[o],t));p[r.id]={id:r.id,refs:1,parts:s}}}}function i(e){for(var t=[],n={},r=0;r<e.length;r++){var i=e[r],o=i[0],s=i[1],a=i[2],u=i[3],l={css:s,media:a,sourceMap:u};n[o]?n[o].parts.push(l):t.push(n[o]={id:o,parts:[l]})}return t}function o(e,t){var n=v(),r=g[g.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),g.push(t);else{if("bottom"!==e.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(t)}}function s(e){e.parentNode.removeChild(e);var t=g.indexOf(e);t>=0&&g.splice(t,1)}function a(e){var t=document.createElement("style");return t.type="text/css",o(e,t),t}function u(e){var t=document.createElement("link");return t.rel="stylesheet",o(e,t),t}function l(e,t){var n,r,i;if(t.singleton){var o=y++;n=m||(m=a(t)),r=c.bind(null,n,o,!1),i=c.bind(null,n,o,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=u(t),r=d.bind(null,n),i=function(){s(n),n.href&&URL.revokeObjectURL(n.href)}):(n=a(t),r=f.bind(null,n),i=function(){s(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}function c(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,i);else{var o=document.createTextNode(i),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(o,s[t]):e.appendChild(o)}}function f(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function d(e,t){var n=t.css,r=t.sourceMap;r&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var i=new Blob([n],{type:"text/css"}),o=e.href;e.href=URL.createObjectURL(i),o&&URL.revokeObjectURL(o)}var p={},h=function(e){var t;return function(){return"undefined"==typeof t&&(t=e.apply(this,arguments)),t}},b=h(function(){return/msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase())}),v=h(function(){return document.head||document.getElementsByTagName("head")[0]}),m=null,y=0,g=[];e.exports=function(e,t){t=t||{},"undefined"==typeof t.singleton&&(t.singleton=b()),"undefined"==typeof t.insertAt&&(t.insertAt="bottom");var n=i(e);return r(n,t),function(e){for(var o=[],s=0;s<n.length;s++){var a=n[s],u=p[a.id];u.refs--,o.push(u)}if(e){r(i(e),t)}for(var s=0;s<o.length;s++){var u=o[s];if(0===u.refs){for(var l=0;l<u.parts.length;l++)u.parts[l]();delete p[u.id]}}}};var x=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}()},function(e,t,n){var r=n(5);"string"==typeof r&&(r=[[e.id,r,""]]);n(6)(r,{});r.locals&&(e.exports=r.locals)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,