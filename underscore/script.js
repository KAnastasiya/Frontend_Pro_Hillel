!function(n){function e(r){if(o[r])return o[r].exports;var t=o[r]={exports:{},id:r,loaded:!1};return n[r].call(t.exports,t,t.exports,e),t.loaded=!0,t.exports}var o={};return e.m=n,e.c=o,e.p="",e(0)}([function(n,e,o){"use strict";var r=o(1),t=[1,0,!1,2,"",3,null,void 0,NaN],a=[{name:"moe",age:40},{name:"larry",age:50},{name:"curly",age:60},{name:"jonny",age:"test"}],c=function(n){return n.age},u=function(n){return!n},l=function(n,e){return n.age>e.age?n:e};console.log("Compact: ",(0,r.compact)(t)),console.log("Pluck: ",(0,r.pluck)(a,c)),console.log("FindIndex: ",(0,r.findIndex)(t,u)),console.log("FindIndex (nothing): ",(0,r.findIndex)([1,3,4],u)),console.log("Max: ",(0,r.max)(a,l)),console.log("Max (empty array): ",(0,r.max)([],l)),console.log("Range (0, 30, 5): ",(0,r.range)(0,30,5)),console.log("Range (0, -10, -1): ",(0,r.range)(0,-10,-1)),console.log("Range (1, 11): ",(0,r.range)(1,11)),console.log("Range (10): ",(0,r.range)(10)),console.log("Range (0): ",(0,r.range)(0))},function(n,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.compact=function(n){return n.filter(function(n){return n})},e.pluck=function(n,e){return n.map(function(n){return e(n)})},e.findIndex=function(n,e){for(var o=0;o<n.length;o++)if(e(n[o]))return o;return-1},e.max=function(n,e){return n.length>0?n.reduce(function(n,o){return e(o,n)}):-(1/0)},e.range=function(n,e){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=[];void 0==e&&(e=n,n=0);for(var t=n;t!==e;)r.push(t),t+=o;return r}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,