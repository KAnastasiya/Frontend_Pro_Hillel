!function(e){function t(r){if(o[r])return o[r].exports;var n=o[r]={exports:{},id:r,loaded:!1};return e[r].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var o={};return t.m=e,t.c=o,t.p="",t(0)}([function(e,t,o){e.exports=o(1)},function(e,t){"use strict";var o=12,r=function(e){var t=60,o=30,r=t/o,n=60*e,a=Math.round(n/r);return e>0?a:-a},n=function(e,t){var o=360,r=Math.abs(e-t);return r===o?0:r>180?o-r:r},a=function(e){return e*(Math.PI/180)},u=function(e,t,o){var r={clockBg:"#fffde7",secondArrow:"#e91e63",otherArrows:"#a1887f",mainNumbers:"#ffc107",addNumbers:"#4caf50"},n=document.querySelector("#clock"),u=n.getContext("2d"),l=n.width/2,c=l-50,i=n.width/2,s=n.width/2,h=c-10,d=.85*h,f=.75*h,m=Math.PI/2;u.fillStyle=r.clockBg,u.beginPath(),u.arc(i,s,l,0,2*Math.PI),u.fill(),u.closePath();var v=new Image;v.src="img/frame.png",v.onload=function(){u.drawImage(v,0,0)},u.textAlign="center";for(var y=1;y<=12;y++)y%3?(u.font="18px Arial",u.fillStyle=r.addNumbers):(u.font="24px Arial",u.fillStyle=r.mainNumbers),u.beginPath(),u.fillText(y,i+c*Math.cos(-30*(y*(Math.PI/180))+Math.PI/2),s+10-c*Math.sin(-30*(y*(Math.PI/180))+Math.PI/2)),u.fill(),u.closePath();u.lineWidth=5,u.lineCap="round",u.strokeStyle=r.otherArrows,u.beginPath(),u.moveTo(i,s),u.lineTo(i+f*Math.cos(m-a(e)),s-f*Math.sin(m-a(e))),u.stroke(),u.closePath(),u.lineWidth=3,u.lineCap="round",u.strokeStyle=r.otherArrows,u.beginPath(),u.moveTo(i,s),u.lineTo(i+d*Math.cos(m-a(t)),s-d*Math.sin(m-a(t))),u.stroke(),u.closePath(),u.lineWidth=2,u.strokeStyle=r.secondArrow,u.beginPath(),u.moveTo(i,s),u.lineTo(i+h*Math.cos(m-a(o)),s-h*Math.sin(m-a(o))),u.stroke(),u.closePath(),u.lineWidth=6,u.strokeStyle=r.otherArrows,u.fillStyle="#fff",u.beginPath(),u.arc(i,s,4,0,2*Math.PI),u.stroke(),u.fill(),u.closePath()},l=function(e,t,r){var n=60,a="minutes"===e?r/o/n:r/o;return t>0?t+a:t-a},c=function(e,t){document.querySelector("#degree__value").innerText=n(e,t)},i=function(){var e=new Date;document.querySelector("#hours").value=e.getHours(),document.querySelector("#minutes").value=e.getMinutes(),document.querySelector("#seconds").value=e.getSeconds()},s=function(){return!(document.querySelector("#hours").value>23||document.querySelector("#minutes").value>59||document.querySelector("#seconds").value>59)},h=function(){var e=5,t=5,n=document.querySelector("#hours").value,a=document.querySelector("#seconds").value/e,i=document.querySelector("#minutes").value/t,s=n>o?n-o:-n,h=l("minutes",i,a),d=l("hours",s,i),f=r(a),m=r(h),v=r(d);c(v,m),u(v,m,f)},d=function(){s()?h():(alert("Указанное время не существует!!!"),i())};i(),h(),document.querySelector(".btn--apply").addEventListener("click",d)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,