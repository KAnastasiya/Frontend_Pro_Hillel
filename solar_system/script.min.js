!function(e){function t(s){if(o[s])return o[s].exports;var d=o[s]={exports:{},id:s,loaded:!1};return e[s].call(d.exports,d,d.exports,t),d.loaded=!0,d.exports}var o={};return t.m=e,t.c=o,t.p="",t(0)}([function(e,t,o){e.exports=o(1)},function(e,t){"use strict";var o={body:document.querySelector("body"),solarSystem:document.querySelector(".solar-system"),mode2d:document.querySelector("input.modes-2d"),mode3d:document.querySelector("input.modes-3d"),mode3dWithPerspective:document.querySelector("input.modes-3d-perspective")},s={mode3d:"mode-3d",perspective:"perspective"},d=function(e){o.body.classList.add(s.mode3d),e?(o.mode3dWithPerspective.checked=!0,o.body.classList.add(s.perspective)):(o.mode3d.checked=!0,o.body.classList.remove(s.perspective))},c=function(){o.mode2d.checked=!0,o.body.classList.remove(s.mode3d),o.body.classList.remove(s.perspective)},r=function(e){o.solarSystem.style.display="none",setTimeout(function(){o.solarSystem.style.display="block"}),e.target.classList.contains("modes-3d")?d(!1):e.target.classList.contains("modes-3d-perspective")?d(!0):c()};document.querySelector(".modes").addEventListener("click",r),d(!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,