/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _utils = __webpack_require__(2);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * DOM-элементы, к которым выполняется обращение
	 * @constant
	 * @type {Object}
	 */
	var ELEMENTS = {
	  canvas: document.querySelector('.balls-container--canvas'),
	  svg: document.querySelector('.balls-container--svg'),
	  modes: document.querySelector('.modes'),
	  modeCanvas: document.querySelector('input.modes-canvas'),
	  modeSvg: document.querySelector('input.modes-svg')
	};
	
	/**
	 * Настройки шаров
	 * @type {Object}
	 * @constant
	 */
	var BALLS_SETTINGS = {
	  minRadius: 10,
	  maxRadius: 30,
	  minDx: -10,
	  maxDx: 10,
	  minDy: -10,
	  maxDy: 10,
	  colors: ['#f44336', '#e91e63', '#9c27b0', '#2196f3', '#00bcd4', '#009688', '#4caf50', '#ff9800']
	};
	
	/**
	 * Скорость смены кадров (в миллисекундах).
	 * Для человеческого глаза оптимальная скорость - 60 кадров в секунду
	 * @type {Number}
	 * @constant
	 */
	var FRAMES_SPEED = 1000 / 60;
	
	/**
	 * Реализация оскока шара от границ контейнера. При этом скорость шара несколько замедляется
	 * @param  {Number} coord    Текущая координата шара
	 * @param  {Number} step     Шаг изменения координаты шара
	 * @param  {Number} radius   Радиус шара
	 * @param  {Number} maxCoord Максимальная допустимая координата шара
	 * @return {Number}
	 */
	var setBoundaries = function setBoundaries(coord, step, radius, maxCoord) {
	  return coord + step > maxCoord - radius || coord + step < radius ? -(0.95 * step) : step;
	};
	
	/**
	 * Контекст canvas, чрез который получается доступ к canvas
	 */
	var canvasContext = void 0;
	
	/**
	 * Идентификатор таймера запуска отрисовки новых кадров анимации
	 */
	var timerId = void 0;
	
	/**
	 * Список всех отрисованных шаров
	 * @type {Array}
	 * @constant
	 */
	var balls = [];
	
	/**
	 * Класс типа 'Шар'
	 * @type {Object}
	 * @constructor
	 */
	
	var Ball = function () {
	  function Ball(x, y) {
	    _classCallCheck(this, Ball);
	
	    this.x = x;
	    this.y = y;
	    this.id = 'circle_' + balls.length;
	    this.radius = (0, _utils.getRandomParam)(BALLS_SETTINGS.minRadius, BALLS_SETTINGS.maxRadius);
	    this.color = BALLS_SETTINGS.colors[(0, _utils.getRandomParam)(0, BALLS_SETTINGS.colors.length)];
	    this.dx = (0, _utils.getRandomParam)(BALLS_SETTINGS.minDx, BALLS_SETTINGS.maxDx);
	    this.dy = (0, _utils.getRandomParam)(BALLS_SETTINGS.minDy, BALLS_SETTINGS.maxDy);
	  }
	
	  _createClass(Ball, [{
	    key: 'drawOnCanvas',
	    value: function drawOnCanvas() {
	      canvasContext.beginPath();
	      canvasContext.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);
	      canvasContext.fillStyle = this.color;
	      canvasContext.fill();
	      canvasContext.closePath();
	    }
	  }, {
	    key: 'drawOnSvg',
	    value: function drawOnSvg() {
	      this.element = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
	      ELEMENTS.svg.appendChild(this.element);
	      this.element.setAttribute('id', this.id);
	      this.element.setAttribute('r', this.radius);
	      this.element.setAttribute('cx', this.x);
	      this.element.setAttribute('cy', this.y);
	      this.element.setAttribute('fill', this.color);
	    }
	  }, {
	    key: 'refreshPosOnSvg',
	    value: function refreshPosOnSvg() {
	      this.element.setAttribute('cx', this.x);
	      this.element.setAttribute('cy', this.y);
	    }
	  }]);
	
	  return Ball;
	}();
	
	/**
	 * Перебор шариков. Пересчет для каждого шарика новой позиции
	 * @param  {Number} maxWidth  Ширина контейнера, в котором перемещаются шарики
	 * @param  {Number} maxHeight Высота контейнера, в котором перемещаются шарики
	 * @param  {String} funcName  Название метода, который нужно вызвать для каждого шарика
	 */
	
	
	var repositionBalls = function repositionBalls(maxWidth, maxHeight, funcName) {
	  balls.forEach(function (ball) {
	    ball.x += ball.dx;
	    ball.y += ball.dy;
	    ball.dx = setBoundaries(ball.x, ball.dx, ball.radius, maxWidth);
	    ball.dy = setBoundaries(ball.y, ball.dy, ball.radius, maxHeight);
	    ball[funcName]();
	  });
	};
	
	/**
	 * Отрисовка кадра на canvas
	 */
	var drawOnCanvasFrame = function drawOnCanvasFrame() {
	  if (balls.length) {
	    (0, _utils.clearCanvas)(ELEMENTS.canvas, canvasContext);
	    canvasContext.globalCompositeOperation = 'lighten';
	    repositionBalls((0, _utils.getCanvasSize)(ELEMENTS.canvas).width, (0, _utils.getCanvasSize)(ELEMENTS.canvas).height, 'drawOnCanvas');
	  }
	  timerId = requestAnimationFrame(drawOnCanvasFrame, FRAMES_SPEED);
	};
	
	/**
	 * Отрисовка кадра на svg
	 */
	var drawOnSvgFrame = function drawOnSvgFrame() {
	  if (balls.length) {
	    var svgSize = ELEMENTS.svg.getBoundingClientRect();
	    var svgWidth = svgSize.width || svgSize.right - svgSize.left;
	    var svgHeight = svgSize.height || svgSize.bottom - svgSize.top;
	    repositionBalls(svgWidth, svgHeight, 'refreshPosOnSvg');
	  }
	  timerId = requestAnimationFrame(drawOnSvgFrame, FRAMES_SPEED);
	};
	
	/**
	 * Установка режима 'Canvas'
	 */
	var setCanvasMode = function setCanvasMode() {
	  ELEMENTS.modeCanvas.checked = true;
	  ELEMENTS.svg.style.display = 'none';
	  ELEMENTS.canvas.style.display = 'block';
	  canvasContext = ELEMENTS.canvas.getContext('2d');
	  drawOnCanvasFrame();
	  ELEMENTS.svg.innerHTML = '';
	};
	
	/**
	 * Установка режима 'Svg'
	 */
	var setSvgMode = function setSvgMode() {
	  ELEMENTS.modeSvg.checked = true;
	  ELEMENTS.canvas.style.display = 'none';
	  ELEMENTS.svg.style.display = 'block';
	  drawOnSvgFrame();
	  if (canvasContext) {
	    (0, _utils.clearCanvas)(ELEMENTS.canvas, canvasContext);
	  }
	};
	
	/**
	 * Создание экземпляра типа 'Шарик'
	 * @param  {Object} event
	 * @return {Array}         Созданный экземпляр шарика
	 */
	var createBallByEvent = function createBallByEvent(event) {
	  var mousePos = (0, _utils.getMousePosition)(event);
	  var ball = new Ball(mousePos.x, mousePos.y);
	  balls.push(ball);
	  return ball;
	};
	
	/**
	 * Обработчик события нажатия по области canvas
	 * @param  {Object} event
	 */
	var onCanvasClick = function onCanvasClick(event) {
	  createBallByEvent(event);
	};
	
	/**
	 * Обработчик события нажатия по области svg
	 * @param  {Object} event
	 */
	var onSvgClick = function onSvgClick(event) {
	  var ball = createBallByEvent(event);
	  ball.drawOnSvg();
	};
	
	/**
	 * Обработчик события нажатия на переключатель режимов
	 * @param  {Object} event
	 */
	var onModeClick = function onModeClick(event) {
	  // Очистка списка ранее созданных шариков. Сброс таймера отрисовки кадров анимации
	  balls = [];
	  cancelAnimationFrame(timerId);
	
	  // Переключение режима
	  if (event.target.classList.contains('modes-canvas')) {
	    setCanvasMode();
	  } else {
	    setSvgMode();
	  }
	};
	
	// Навешивание обработчиков событий
	ELEMENTS.modes.addEventListener('click', onModeClick);
	ELEMENTS.canvas.addEventListener('click', onCanvasClick);
	ELEMENTS.svg.addEventListener('click', onSvgClick);
	
	// Инициализация приложения
	setCanvasMode();

/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * Получение случайного целого неравномерно распределенного числа между min (включительно) и max (не включая max)
	 * @param  {Number} min Минимальное значение параметра
	 * @param  {Number} max Максимальное значение параметра
	 * @return {Number}
	 */
	var getRandomParam = exports.getRandomParam = function getRandomParam(min, max) {
	  var res = void 0;
	  // Цикл do while исключает получение нуля
	  do {
	    res = Math.floor(Math.random() * (max - min) + min);
	  } while (!res);
	  return res;
	};
	
	/**
	 * Определение координат мыши
	 * @param  {Object} event Событие, вызвавшее данную функцию
	 * @return {Object}
	 */
	var getMousePosition = exports.getMousePosition = function getMousePosition(event) {
	  var rect = event.target.getBoundingClientRect();
	  return {
	    x: event.clientX - rect.left,
	    y: event.clientY - rect.top
	  };
	};
	
	/**
	 * Получение размеров canvas
	 * @param  {Element} canvas DOM-элемент для canvas
	 * @return {Object}
	 */
	var getCanvasSize = exports.getCanvasSize = function getCanvasSize(canvas) {
	  return {
	    width: canvas.width,
	    height: canvas.height
	  };
	};
	
	/**
	 * Очистка canvas
	 * @param  {Element} canvas        DOM-элемент для canvas
	 * @param  {Object}  canvasContext Контекст canvas
	 */
	var clearCanvas = exports.clearCanvas = function clearCanvas(canvas, canvasContext) {
	  canvasContext.clearRect(0, 0, getCanvasSize(canvas).width, getCanvasSize(canvas).height);
	};

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,