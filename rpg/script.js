!function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return e[o].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}var r=n(4),a=o(r),i=n(5),u=o(i),s=n(3),c=o(s),l=n(2),h=void 0,f=function(e,t){switch(e){case"human":return new a.default(t);case"orc":return new u.default(t);case"elf":return new c.default(t);default:console.error("It is impossible to create a fighter. Unknown race <"+e+">")}},p=function(e,t){switch(e.race){case"human":e.build();break;case"orc":e.attack(t);break;case"elf":e.shoot(t,(0,l.getRandomParam)(5,1),(0,l.getRandomParam)(100,1));break;default:console.error("It is impossible to make a move")}},d=function(e,t){return e.health>t.health?e:t},w=function(e,t,n,o){h=100;var r=f(e,t),a=f(n,o);if(r&&a)if(r.race!==a.race)if("human"!==r.race&&"human"!==a.race)console.error("Battle between "+r.race+" and "+a.race+" is impossible. One of the fighters must be a human");else for(console.warn("Battle started");h>0;)try{h%2?p(a,r):p(r,a),h-=1}catch(e){h=0,console.warn("Battle stopped. "+e.message);var i=d(a,r);console.warn(i.name+" ("+i.race+") is winner (his health = "+i.health+")!")}else console.error("Battle between two fighters of one race is impossible")};w("elf","Argon","human","Bob"),console.log("*******************************************"),w("human","Bony","orc","Bolg"),console.log("*******************************************"),w("orc","Bolg","elf","Argon"),console.log("*******************************************"),w("human","Alex","human","Nick"),console.log("*******************************************"),w("orc","Bolg","ninja","Katty")},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(2),i=function(){function e(t){o(this,e),this.health=100,this.power=50,this.damage=15,this.walkingSpeed=5,this.runningSpeed=15,this.name=t}return r(e,[{key:"walk",value:function(e){var t=(0,a.getTimeByDistanceAndSpeed)(e,this.walkingSpeed);console.log(this.name+" walk "+e+"km with speed "+this.walkingSpeed+"km/h (time - "+t+"h)")}},{key:"run",value:function(e){var t=(0,a.getTimeByDistanceAndSpeed)(e,this.runningSpeed);console.log(this.name+" run "+e+"km with speed "+this.runningSpeed+"km/h (time - "+t+"h)")}}]),e}();t.default=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.getRandomParam=function(e,t){var n=void 0;do n=Math.floor(Math.random()*(t-e)+e);while(!n);return n},t.getTimeByDistanceAndSpeed=function(e,t){return Math.floor(e/t)}},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),s=n(1),c=o(s),l=10,h=5,f=.1,p=90,d=new WeakMap,w=function(e){function t(e){r(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.health=70,n.power=20,n.damage=40,d.set(n,l),n}return i(t,e),u(t,[{key:"shoot",value:function(e,t,n){if(0===this.arrowCount)throw new Error(this.name+" ("+this.race+") can not shoot more");if(this.arrowCount-t<0)return void console.error(this.name+" ("+this.race+") try to shoot "+t+" arrows, but can shoot only "+this.arrowCount+" arrows. Move does not count towards :(");if(n>p)return void console.error(this.name+" ("+this.race+") try to shoot on "+n+" meters, but can shoot only on "+p+". Move does not count towards :(");d.set(this,this.arrowCount-t);var o=this.arrowCount>0?"he can shoot still "+this.arrowCount+" arrows":"he can not shoot more!!!";console.info(this.name+" ("+this.race+") shot "+t+" arrows on "+n+" ("+o),e.updateHealth(-Math.floor(t*h+n*f))}},{key:"race",get:function(){return"elf"}},{key:"arrowCount",get:function(){return d.get(this)}}]),t}(c.default);t.default=w},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),s=n(1),c=o(s),l=3,h=110,f=new WeakMap,p=function(e){function t(e){r(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.health=80,n.power=30,n.damage=10,f.set(n,l),n}return i(t,e),u(t,[{key:"build",value:function(){if(0===this.buildCount)throw new Error(this.name+" ("+this.race+") can not build more");f.set(this,this.buildCount-1);var e=this.buildCount>0?"he can build still "+this.buildCount+" times":"he can not build more!!!";console.info(this.name+" ("+this.race+") built ("+e+")"),this.updateHealth()}},{key:"updateHealth",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,t=this.health;this.health=Math.min(this.health+e,h),console.log(this.name+" ("+this.race+") new health = "+this.health+" ("+t+" + "+e+")")}},{key:"race",get:function(){return"human"}},{key:"buildCount",get:function(){return f.get(this)}}]),t}(c.default);t.default=p},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),s=n(1),c=o(s),l=5,h=.2,f=new WeakMap,p=function(e){function t(e){r(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.health=40,n.power=80,n.damage=130,f.set(n,l),n}return i(t,e),u(t,[{key:"attack",value:function(e){if(0===this.attackCount)throw new Error(this.name+" ("+this.race+") can not attack more");f.set(this,this.attackCount-1);var t=this.attackCount>0?"he can attack still "+this.attackCount+" times":"he can not attack more!!!";console.info(this.name+" ("+this.race+") attacked ("+t+")"),this.updatePower(),e.updateHealth(-Math.floor(this.power*h))}},{key:"updatePower",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,t=this.power;this.power+=e,console.info(this.name+" ("+this.race+") new power = "+this.power+" ("+t+" + "+e+")")}},{key:"race",get:function(){return"orc"}},{key:"attackCount",get:function(){return f.get(this)}}]),t}(c.default);t.default=p}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,